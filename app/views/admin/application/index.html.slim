
- reorder = (params[:reorder] == 'true')
- allow = policy(@model)

- content_for :title, human_model_name(@model, :plural)

.ui.icon.message
  i.question.circle.icon
  .content
    .header = translate('admin.tutorial.index.title')
    .message
      = simple_format translate(@model.model_name.route_key, scope: 'admin.tutorial.index.message')

- if reorder
  = form_tag polymorphic_admin_path([:sort, :admin, @model]), method: :put
    .actions
      a.ui.tiny.compact.basic.button href=polymorphic_admin_path([:admin, @model])
        = translate 'admin.action.simple.cancel'
      button.ui.tiny.compact.basic.positive.right.labeled.icon.button
        = translate 'admin.action.simple.update'
        i.checkmark.icon

    .clearfix

    .ui.sort-list.items
      - @records.each do |record|
        .sortable.item
          .header.handle
            i.bars.icon
            = record.preview_name
          = hidden_field_tag 'order[]', record[:id], { id: "order_for_#{record.id}" }

  .ui.hidden.divider
- else
  .table-actions = table_actions(@model, @records)
  .clearfix

  form.ui.form method='GET' action='?sort=#{params[:sort]}&filter=#{params[:filter]}' data-remote=true
    .ui.tiny.models.menu
      .ui.fluid.search.item
        .ui.transparent.left.icon.input
          i.search.link.icon
          input name='q' type='text' placeholder=translate('admin.action.search') value=params[:q]

      .ui.dropdown.item
        .title = translate('admin.index.sort.title')
        .value = params[:sort].present? ? translate(params[:sort], scope: %i[admin index sort columns]) : nil
        i.dropdown.icon
        .menu
          a.item href="?filter=#{params[:filter]}&q=#{params[:q]}"
            = translate('admin.index.attribute.default')
          - table_sortable_columns(@model) do |column|
            a.item href="?sort=#{column}&filter=#{params[:filter]}&q=#{params[:q]}"
              = translate(column, scope: %i[admin index sort columns])

      .ui.dropdown.item
        .title = translate('admin.index.filter.title')
        .value = params[:filter].present? ? table_filterable_label(@model, params[:filter]) : nil
        i.dropdown.icon
        .menu
          a.item href="?sort=#{params[:sort]}&q=#{params[:q]}"
            = translate('admin.index.attribute.none')
          - table_filterable_columns(@model) do |column, values|
            .item
              i.dropdown.icon
              = column != :status ? human_attribute_name(@model, column) : translate('admin.index.attribute.status')
              .menu
                - values&.each do |value|
                  a.item href="?filter=#{column}:#{value[0]}&sort=#{params[:sort]}&q=#{params[:q]}"
                    = value[1]

      - if allow.new?
        .right.menu
          a.item href=polymorphic_path([:new, :admin, @model.model_name.singular_route_key.to_sym])
            i.plus.icon
            = translate('admin.action.simple.create')

  - unless current_user.translator?
    table.ui.compact.unstackable.models.table
      thead
        tr
          - table_columns(@model) do |column, index|
            th class=('collapsing' unless index == 0 || column == :artist_id)
              - column = :created_at if params[:sort] == 'created_at' && column == :updated_at
              = translate(column, scope: %i[admin index columns])
              - if params[:sort] == column.to_s
                i.dropdown.icon
              - if params[:filter].present? && params[:filter].split(':')[0] == column.to_s
                i.small.filter.icon

      tbody#records = render partial: "admin/records/#{@model.model_name.singular_route_key}", collection: @records

    #pagination
      - if @records.empty?
        = translate 'admin.messages.no_records_found', pages: human_model_name(@model, :plural).downcase
      - else
        = page_entries_info @records
        = paginate @records, remote: true

  - if @separated_records.present?
    - unless current_user.translator?
      .ui.small.header = @separated_records_title

    table.ui.compact.unstackable.models.table
      thead
        tr
          - table_columns(@model, original_locale: true) do |column, index|
            th class=('collapsing' unless index == 0 || column == :artist_id)
              - column = :created_at if params[:sort] == 'created_at' && column == :updated_at
              = translate(column, scope: %i[admin index columns])
              - if params[:sort] == column.to_s
                i.dropdown.icon
              - if params[:filter].present? && params[:filter].split(':')[0] == column.to_s
                i.small.filter.icon

      tbody#separated-records = render partial: "admin/records/#{@model.model_name.singular_route_key}", collection: @separated_records, locals: { original_locale: true }

    #separated-pagination
      - if @separated_records.empty? && current_user.translator?
        = translate 'admin.messages.no_translations_found', pages: human_model_name(@model, :plural).downcase
      - else
        = page_entries_info @separated_records
        = paginate @separated_records, remote: true

  .ui.hidden.divider

  = table_navigation(@model)
